List
    A list is a value that contains values. 
    It contains multiple values in an ordered sequence.
    The values inside a list are called items.
    Comma-delimeted means seperated by commas.
    It starts and ends with [] and the values inside are seperated by commas.
    Index
        Only one item
        In order to access an item in a list, you use an integer index for the item's position in the list
        For the first item in a list, you would use the integer 0 in the index.
        You do this using square brackets and then the item's position's number you want. ex. spam[3]
        Lists can contain other lists. The values in those can be accessed using multiple indexes ex. spam[0][1]
        While indexes start at 0 and go up, you can use negative integers for the indexes. These count from the end going backwards.
        ex. -1 is the last integer in the list, etc.
    Slice
        Just as an index gets a single value from a list, a slice can get several values from a list.
        ex. spam[0:3]
        Evaluates to new list value
        changes items 0, 1, 2 or the first 3 items. (doesn't include 3 which is the 4th.)
        Slice shortcut 
            You can leave out one or both of the index's in the slice.
            Leaving out the first index is the same as saying 0
            Leaving out the second index is the same as saying the length of the list which will slice to the end of the list.
    Changing a list's items
        You can use an index, an equals sign, and the new value you want that item to be to change a list's item.
        ex. spam[2] = 'mouse'
        The same can be done with a slice.
        ex. spam[1:3] = 'cat', 'dog', 'mouse'
        changes items 2 and 3 in spam to 'cat', 'dog', and 'mouse'
    del statements
        Just put del in front of the index or slice you want to delete!
        ex. del spam[2] would delete the third value in spam.
    len function
        You can use the len function with list just like strings, but it returns the length of the values in the list.
    List concatenation/replication
        Just like with strings, you can add lists together with the + operator.
        Just like with strings, you can replicate lists together with the * operator.
        ex. [1,2,3]*3 = [1,2,3,1,2,3,1,2,3]
    list() function
        If you pass it a string like 'hello' it returns ['h','e','l','l','o']
    in and not operators
        If you need to determine if a value is or isn't in a list, use these operators.
        ex. 'hello' in ['hello','howdy','hi'] would evaluate to true
        ex. 'hello' not in ['hello','howdy','hi'] would evaluate to false
    range objects in list-like values
        range objects are list like values. Python considers: range(0,4) to be like the list: [0,1,2,3]
        If you write a for loop with that list instead of that range, it does the exact same thing
        If you want to get the list value from a range object value, use the list() function.
        ex. list(range(4)) would return [0,1,2,3]
        This is useful if you want to make a list with integers 0-100. You can just use the range object value in the list function for this
    for i in range(len(listname))
        See range list practice for an example of how this could be used.
        Using this format is handy because you can use the for loop variable i as both the index, and also the list value.
    Multiple Assignment
        You can have multiple variables on the left side of the assignment operator seperated by commas, and then just have the list name
        This will automatically assaign each of those variables to each of the list values.
        See range multiple assignment practice for an example of this.
        You can also do this without a list, and just assign mutliple variables to multiple values in one line of code.
    
    Methods
        A method is the same thing as a function, except is attached or called on a certain value.
        You can't call a method by itself, because python doesn't know what list you want to use that method on.
        That is why you need to call it on a variable that contains a value.
        Put the name of the variable, . , and then the method (other than that it is basically the same as a function.)
        index() method
            All list values have this method
            It returns the index position of that value.
            ex. spam.index('hello')
            If you have duplicated values inside a list and you use the index method on it, it returns the index position of the first time that value shows up.
        append() and insert() methods
            the append list method adds a value to the end of a list
            the insert method is similar, but it can insert a value at any place in the list
            In the brackets, put the item's position, and then the value you want to be inserted in that position.
            ex. spam.insert(1,'moose')
            if you don't put anything for where you want the item's position to be, it automatically goes to the end.
            You cannot use the append method with strings because it only works on lists
        remove() method
            as the argument in this method, put the value you would like removed.
            ex. spam.remove('cat') would remove cat from the list spam regardless of where it is in the list.
            This is different from the del statement, because it just deletes the place number of a list. the remove() deletes a certain value.
            If a value appears multiple times in a list, only the first value would be removed.
        sort() method
            Lists with number values or string values can be sorted with this method.
            If you have integer values in a list and use the sort method, it sorts them from smallest to largest.
            If the list has string values, it sorts them by alphabetical order.
            If you use the sort method but type: listname.sort(reverse=True), it would sort the same thing but in reverse order.
            You can't sort lists that both have number and string values.
            ASCII-betical order
                pretty much the same thing, but uppercase characters come before lowercase characters
                this is what is used for strings in sort() method
            If you want true alphabetical sorting, write: listname.sort(key=str.lower).

    Similarities between Lists and Strings
        You can think of a string like a list in which each individual letter is another value.
        You can use indexes and slices on strings just like on lists. 
        You can use in and not operators on strings just like on lists.
        Mutable and immutable data typesm
            A string value is immutable. It cannot be changed. You cannot reassign letters in that string.
            A list is mutable.
            SEE PROGRAM LISTS VS STRINGS FOR MORE NOTES!!!!!!
            Why does python have these? Well, lists can be very big and can take up a lot of your computer's memory.
            If a variable has a list that has 4 billion integers, then it would be very hard to copy that variable to another one, or every time you make a function call.
            So it is easier to assign a reference and to only store the list once.
            Copy.deepcopy() function
                If you want a completely seperate list, use this.
                You need to import the copy module.
                This creates a brand new list with the same values, not just a reference.
                LOOK AT COPY DEEPCOPY FUNCTION PRACTICE FOR MORE NOTES!!!!!
        Passing Lists in function calls
            SEE PROGRAM PASSING LISTS IN FUNCTION CALLS PROGRAM FOR MORE NOTES!!
        Creating new strings from slices
            The proper way to modify a string, is to create a new string, using slices.
            Use slices to pick out the parts of the string you want to keep, and use string concatenation to add new parts.
    Line continuation
        In most cases, the amount of indentations for a line of code in python tells what block it is in, but there is an exception to this rule.
        Lists can actually span multiple lines of code.
        Just indent the next value in your list.
        SEE PROGRAM 4 FOR AN EXAMPLE OF WHAT THIS LOOKS LIKE.  
        This is nice, because if you have a lot of values, you don't need to cram it all on one line that is super long. It is also easier to read.
        You can do this not in a list too, by using \ (NOTE THIS IS NOT THE DIVISON SIGN IT IS OPPOSITE OF THAT)
        SEE PROGRAM 4 FOR AN EXAMPL EOF WHAT THIS LOOKS LIKE.

        

Augmented assignment operators
    instead of using: spam = spam + 1, you can just use spam+= 1 which does the same thing.
    You can also use this for subtracting multiplying and dividing.