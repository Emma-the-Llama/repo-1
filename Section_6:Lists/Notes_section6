List
    A list is a value that contains values. 
    It contains multiple values in an ordered sequence.
    The values inside a list are called items.
    Comma-delimeted means seperated by commas.
    It starts and ends with [] and the values inside are seperated by commas.
    Index
        Only one item
        In order to access an item in a list, you use an integer index for the item's position in the list
        For the first item in a list, you would use the integer 0 in the index.
        You do this using square brackets and then the item's position's number you want. ex. spam[3]
        Lists can contain other lists. The values in those can be accessed using multiple indexes ex. spam[0][1]
        While indexes start at 0 and go up, you can use negative integers for the indexes. These count from the end going backwards.
        ex. -1 is the last integer in the list, etc.
    Slice
        Just as an index gets a single value from a list, a slice can get several values from a list.
        ex. spam[0:3]
        Evaluates to new list value
        changes items 0, 1, 2 or the first 3 items. (doesn't include 3 which is the 4th.)
        Slice shortcut 
            You can leave out one or both of the index's in the slice.
            Leaving out the first index is the same as saying 0
            Leaving out the second index is the same as saying the length of the list which will slice to the end of the list.
    Changing a list's items
        You can use an index, an equals sign, and the new value you want that item to be to change a list's item.
        ex. spam[2] = 'mouse'
        The same can be done with a slice.
        ex. spam[1:3] = 'cat', 'dog', 'mouse'
        changes items 2 and 3 in spam to 'cat', 'dog', and 'mouse'
    del statements
        Just put del in front of the index or slice you want to delete!
        ex. del spam[2] would delete the third value in spam.
    len function
        You can use the len function with list just like strings, but it returns the length of the values in the list.
    List concatenation/replication
        Just like with strings, you can add lists together with the + operator.
        Just like with strings, you can replicate lists together with the * operator.
        ex. [1,2,3]*3 = [1,2,3,1,2,3,1,2,3]
    list() function
        If you pass it a string like 'hello' it returns ['h','e','l','l','o']
    in and not operators
        If you need to determine if a value is or isn't in a list, use these operators.
        ex. 'hello' in ['hello','howdy','hi'] would evaluate to true
        ex. 'hello' not in ['hello','howdy','hi'] would evaluate to false
    range objects in list-like values
        range objects are list like values. Python considers: range(0,4) to be like the list: [0,1,2,3]
        If you write a for loop with that list instead of that range, it does the exact same thing
        If you want to get the list value from a range object value, use the list() function.
        ex. list(range(4)) would return [0,1,2,3]
        This is useful if you want to make a list with integers 0-100. You can just use the range object value in the list function for this
    for i in range(len(listname))
        See range list practice for an example of how this could be used.
        Using this format is handy because you can use the for loop variable i as both the index, and also the list value.
    Multiple Assignment
        You can have multiple variables on the left side of the assignment operator seperated by commas, and then just have the list name
        This will automatically assaign each of those variables to each of the list values.
        See range multiple assignment practice for an example of this.
        You can also do this without a list, and just assign mutliple variables to multiple values in one line of code.
    Augmented assignment operators
        instead of using: spam = spam + 1, you can just use spam+= 1 which does the same thing.
        You can also use this for subtracting multiplying and dividing.